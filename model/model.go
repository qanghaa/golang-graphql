// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Book struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	URL         string    `json:"url"`
	CreatedBy   *User     `json:"createdBy"`
	ReleasedAt  time.Time `json:"releasedAt"`
	Rating      *int      `json:"rating"`
	Review      []*Review `json:"review"`
}

type NewBook struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	URL         string    `json:"url"`
	ReleasedAt  time.Time `json:"releasedAt"`
}

type NewReview struct {
	CreatedBy string    `json:"createdBy"`
	Content   string    `json:"content"`
	Book      string    `json:"book"`
	CreatedAt time.Time `json:"createdAt"`
}

type NewUser struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
	Role      *Role  `json:"role"`
}

type Review struct {
	ID        string    `json:"id"`
	Content   string    `json:"content"`
	CreatedBy *User     `json:"createdBy"`
	Book      *Book     `json:"book"`
	Rating    int       `json:"rating"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type UpdateBook struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	URL         string `json:"url"`
}

type UpdateReview struct {
	Content   *string   `json:"content"`
	Rating    *int      `json:"rating"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type UpdateUser struct {
	Email     *string   `json:"email"`
	FirstName *string   `json:"firstName"`
	LastName  *string   `json:"lastName"`
	Password  *string   `json:"password"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Role      Role      `json:"role"`
	Books     []*Book   `json:"books"`
	IsActive  *bool     `json:"isActive"`
}

type Role string

const (
	RoleAuthor Role = "author"
	RoleAdmin  Role = "admin"
	RoleUser   Role = "user"
)

var AllRole = []Role{
	RoleAuthor,
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAuthor, RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
